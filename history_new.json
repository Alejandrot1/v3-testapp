[
  {
    "role": "user",
    "content": "Create a FastAPI backend + Vite+React SPA with a stats page."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return JSONResponse(content={\"visits\": 100, \"users\": 50})\n\n--- file: backend/requirements.txt ---\nfastapi\nuvicorn[standard]\n\n--- file: Dockerfile ---\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY backend/ .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n\n--- file: README.md ---\n# FastAPI + Vite + React SPA\n\n## Build and Push to Artifact Registry\n\n1. Build the Docker image:\n   ```\n   docker build -t <your-image-name> .\n   ```\n\n2. Push the image to Artifact Registry:\n   ```\n   docker push <your-image-name>\n   ```\n\n## Deploy to Cloud Run\n\n1. Deploy the service:\n   ```\n   gcloud run deploy <your-service-name> --image <your-image-name> --platform managed --region <your-region>\n   ```\n\n## Frontend Setup\n\n1. Navigate to the frontend directory:\n   ```\n   cd frontend\n   ```\n\n2. Install dependencies:\n   ```\n   npm install\n   ```\n\n3. Start the development server:\n   ```\n   npm run dev\n   ```\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './Home';\nimport Stats from './Stats';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/stats\" element={<Stats />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n\n--- file: frontend/src/Home.jsx ---\nimport React from 'react';\n\nfunction Home() {\n  return <h1>Welcome to the FastAPI + Vite + React SPA!</h1>;\n}\n\nexport default Home;\n\n--- file: frontend/src/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\n\nfunction Stats() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return (\n    <div>\n      <h1>Statistics</h1>\n      {data ? (\n        <ul>\n          <li>Visits: {data.visits}</li>\n          <li>Users: {data.users}</li>\n        </ul>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default Stats;\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"frontend\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"react-router-dom\": \"^6.0.0\",\n    \"vite\": \"^3.0.0\"\n  }\n}\n\n--- file: firebase.json ---\n{\n  \"hosting\": {\n    \"rewrites\": [\n      {\n        \"source\": \"/api/**\",\n        \"run\": {\n          \"serviceId\": \"<your-service-id>\",\n          \"region\": \"<your-region>\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "role": "user",
    "content": "Create a FastAPI backend + Vite+React SPA with a stats page."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return JSONResponse(content={\"visits\": 100, \"users\": 50})\n\n--- file: backend/requirements.txt ---\nfastapi\nuvicorn[standard]\n\n--- file: Dockerfile ---\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY backend/ .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n\n--- file: README.md ---\n# FastAPI + Vite + React SPA\n\n## Build and Push to Artifact Registry\n\n1. Build the Docker image:\n   ```\n   docker build -t <your-image-name> .\n   ```\n\n2. Push the image to Artifact Registry:\n   ```\n   docker push <your-image-name>\n   ```\n\n## Deploy to Cloud Run\n\n1. Deploy the service:\n   ```\n   gcloud run deploy <your-service-name> --image <your-image-name> --platform managed --region <your-region>\n   ```\n\n## Frontend Setup\n\n1. Navigate to the frontend directory:\n   ```\n   cd frontend\n   ```\n\n2. Install dependencies:\n   ```\n   npm install\n   ```\n\n3. Start the development server:\n   ```\n   npm run dev\n   ```\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './Home';\nimport Stats from './Stats';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/stats\" element={<Stats />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n\n--- file: frontend/src/Home.jsx ---\nimport React from 'react';\n\nfunction Home() {\n  return <h1>Welcome to the FastAPI + Vite + React SPA!</h1>;\n}\n\nexport default Home;\n\n--- file: frontend/src/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\n\nfunction Stats() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return (\n    <div>\n      <h1>Statistics</h1>\n      {data ? (\n        <ul>\n          <li>Visits: {data.visits}</li>\n          <li>Users: {data.users}</li>\n        </ul>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default Stats;\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"frontend\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"react-router-dom\": \"^6.0.0\",\n    \"vite\": \"^3.0.0\"\n  }\n}\n\n--- file: firebase.json ---\n{\n  \"hosting\": {\n    \"rewrites\": [\n      {\n        \"source\": \"/api/**\",\n        \"run\": {\n          \"serviceId\": \"<your-service-id>\",\n          \"region\": \"<your-region>\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "role": "user",
    "content": "Create a FastAPI backend + Vite+React SPA with a stats page."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return JSONResponse(content={\"visits\": 100, \"users\": 50})\n\n--- file: backend/requirements.txt ---\nfastapi\nuvicorn[standard]\n\n--- file: Dockerfile ---\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY backend/ .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n\n--- file: README.md ---\n# FastAPI + Vite + React SPA\n\n## Build and Push to Artifact Registry\n\n1. Build the Docker image:\n   ```\n   docker build -t <your-image-name> .\n   ```\n\n2. Push the image to Artifact Registry:\n   ```\n   docker push <your-image-name>\n   ```\n\n## Deploy to Cloud Run\n\n1. Deploy the service:\n   ```\n   gcloud run deploy <your-service-name> --image <your-image-name> --platform managed --region <your-region>\n   ```\n\n## Frontend Setup\n\n1. Navigate to the frontend directory:\n   ```\n   cd frontend\n   ```\n\n2. Install dependencies:\n   ```\n   npm install\n   ```\n\n3. Start the development server:\n   ```\n   npm run dev\n   ```\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './Home';\nimport Stats from './Stats';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/stats\" element={<Stats />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n\n--- file: frontend/src/Home.jsx ---\nimport React from 'react';\n\nfunction Home() {\n  return <h1>Welcome to the FastAPI + Vite + React SPA!</h1>;\n}\n\nexport default Home;\n\n--- file: frontend/src/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\n\nfunction Stats() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return (\n    <div>\n      <h1>Statistics</h1>\n      {data ? (\n        <ul>\n          <li>Visits: {data.visits}</li>\n          <li>Users: {data.users}</li>\n        </ul>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default Stats;\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"frontend\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"react-router-dom\": \"^6.0.0\",\n    \"vite\": \"^3.0.0\"\n  }\n}\n\n--- file: firebase.json ---\n{\n  \"hosting\": {\n    \"rewrites\": [\n      {\n        \"source\": \"/api/**\",\n        \"run\": {\n          \"serviceId\": \"<your-service-id>\",\n          \"region\": \"<your-region>\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "role": "user",
    "content": "Create a FastAPI backend + Vite+React SPA with a stats page."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Hello, World!\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return JSONResponse(content={\"visits\": 100, \"users\": 50})\n\n--- file: backend/requirements.txt ---\nfastapi\nuvicorn[standard]\n\n--- file: Dockerfile ---\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY backend/ .\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n\n--- file: README.md ---\n# FastAPI + Vite + React SPA\n\n## Build and Push to Artifact Registry\n\n1. Build the Docker image:\n   ```\n   docker build -t <your-image-name> .\n   ```\n\n2. Push the image to Artifact Registry:\n   ```\n   docker push <your-image-name>\n   ```\n\n## Deploy to Cloud Run\n\n1. Deploy the service:\n   ```\n   gcloud run deploy <your-service-name> --image <your-image-name> --platform managed --region <your-region>\n   ```\n\n## Frontend Setup\n\n1. Navigate to the frontend directory:\n   ```\n   cd frontend\n   ```\n\n2. Install dependencies:\n   ```\n   npm install\n   ```\n\n3. Start the development server:\n   ```\n   npm run dev\n   ```\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Home from './Home';\nimport Stats from './Stats';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/stats\" element={<Stats />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n\n--- file: frontend/src/Home.jsx ---\nimport React from 'react';\n\nfunction Home() {\n  return <h1>Welcome to the FastAPI + Vite + React SPA!</h1>;\n}\n\nexport default Home;\n\n--- file: frontend/src/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\n\nfunction Stats() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return (\n    <div>\n      <h1>Statistics</h1>\n      {data ? (\n        <ul>\n          <li>Visits: {data.visits}</li>\n          <li>Users: {data.users}</li>\n        </ul>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default Stats;\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"frontend\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"serve\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"react-router-dom\": \"^6.0.0\",\n    \"vite\": \"^3.0.0\"\n  }\n}\n\n--- file: firebase.json ---\n{\n  \"hosting\": {\n    \"rewrites\": [\n      {\n        \"source\": \"/api/**\",\n        \"run\": {\n          \"serviceId\": \"<your-service-id>\",\n          \"region\": \"<your-region>\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "role": "user",
    "content": "keep creatin\u0017building out the FastAPI backend + Vite+React SPA site and make it about the fire department."
  },
  {
    "role": "assistant",
    "content": "[ERROR] BadRequestError: Error code: 400 - {'error': {'message': \"Unsupported parameter: 'temperature' is not supported with this model.\", 'type': 'invalid_request_error', 'param': 'temperature', 'code': None}}"
  },
  {
    "role": "user",
    "content": "keep buikding out the FastAPI backend + Vite+React SPA site and make it about the fire department."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom datetime import datetime, timedelta, timezone\nfrom typing import List, Optional\n\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI(title=\"Fire Department API\", version=\"1.0.0\")\n\n# Allow frontend dev server in local development\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5173\", \"http://127.0.0.1:5173\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# In-memory sample data\nUTC = timezone.utc\nnow = datetime.now(tz=UTC)\n\nSTATIONS = [\n    {\n        \"id\": 1,\n        \"name\": \"Station 1 - Central\",\n        \"address\": \"100 Main St\",\n        \"apparatus_count\": 4,\n        \"on_duty_count\": 12,\n        \"lat\": 47.6062,\n        \"lng\": -122.3321,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Station 2 - North\",\n        \"address\": \"220 North Ave\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 9,\n        \"lat\": 47.6756,\n        \"lng\": -122.2711,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Station 3 - South\",\n        \"address\": \"450 South Blvd\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 8,\n        \"lat\": 47.5233,\n        \"lng\": -122.3550,\n    },\n]\n\nINCIDENTS = [\n    {\n        \"id\": 101,\n        \"type\": \"Structure Fire\",\n        \"severity\": \"Critical\",\n        \"status\": \"Active\",\n        \"address\": \"742 Evergreen Terrace\",\n        \"reported_at\": (now - timedelta(minutes=12)).isoformat(),\n        \"units_responding\": [\"E1\", \"T1\", \"B1\", \"M3\"],\n        \"station_id\": 1,\n    },\n    {\n        \"id\": 102,\n        \"type\": \"Medical Aid\",\n        \"severity\": \"Moderate\",\n        \"status\": \"Cleared\",\n        \"address\": \"88 Lakeview Rd\",\n        \"reported_at\": (now - timedelta(hours=3, minutes=5)).isoformat(),\n        \"units_responding\": [\"M2\"],\n        \"station_id\": 2,\n    },\n    {\n        \"id\": 103,\n        \"type\": \"Vehicle Accident\",\n        \"severity\": \"High\",\n        \"status\": \"Active\",\n        \"address\": \"I-5 S & Exit 163\",\n        \"reported_at\": (now - timedelta(minutes=34)).isoformat(),\n        \"units_responding\": [\"E3\", \"M4\", \"B2\"],\n        \"station_id\": 3,\n    },\n    {\n        \"id\": 104,\n        \"type\": \"Alarm Bell\",\n        \"severity\": \"Low\",\n        \"status\": \"Cleared\",\n        \"address\": \"55 Commerce Park\",\n        \"reported_at\": (now - timedelta(hours=15)).isoformat(),\n        \"units_responding\": [\"E2\"],\n        \"station_id\": 2,\n    },\n]\n\n# Derived stats (mock)\ndef month_start(dt: datetime) -> datetime:\n    return dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n\ndef compute_stats():\n    calls_today = sum(1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]).date() == now.date())\n    calls_this_month = sum(1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]) >= month_start(now))\n    active_incidents = sum(1 for i in INCIDENTS if i[\"status\"].lower() == \"active\")\n    avg_response_time_min = 5.7  # mock\n    firefighters_on_duty = sum(s[\"on_duty_count\"] for s in STATIONS)\n    stations_count = len(STATIONS)\n    return {\n        \"calls_today\": calls_today,\n        \"calls_this_month\": calls_this_month,\n        \"avg_response_time_min\": avg_response_time_min,\n        \"active_incidents\": active_incidents,\n        \"firefighters_on_duty\": firefighters_on_duty,\n        \"stations\": stations_count,\n        \"last_updated\": now.isoformat(),\n    }\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Welcome to the Fire Department API\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return compute_stats()\n\n@app.get(\"/api/stations\")\nasync def list_stations():\n    return {\"stations\": STATIONS}\n\n@app.get(\"/api/stations/{station_id}\")\nasync def get_station(station_id: int):\n    station = next((s for s in STATIONS if s[\"id\"] == station_id), None)\n    if not station:\n        raise HTTPException(status_code=404, detail=\"Station not found\")\n    incidents = [i for i in INCIDENTS if i[\"station_id\"] == station_id]\n    return {\"station\": station, \"recent_incidents\": incidents}\n\n@app.get(\"/api/incidents\")\nasync def list_incidents(status: Optional[str] = None, severity: Optional[str] = None):\n    data = INCIDENTS\n    if status:\n        data = [i for i in data if i[\"status\"].lower() == status.lower()]\n    if severity:\n        data = [i for i in data if i[\"severity\"].lower() == severity.lower()]\n    return {\"incidents\": data}\n\n@app.get(\"/api/incidents/{incident_id}\")\nasync def get_incident(incident_id: int):\n    incident = next((i for i in INCIDENTS if i[\"id\"] == incident_id), None)\n    if not incident:\n        raise HTTPException(status_code=404, detail=\"Incident not found\")\n    station = next((s for s in STATIONS if s[\"id\"] == incident[\"station_id\"]), None)\n    return {\"incident\": incident, \"station\": station}\n\n--- file: backend/requirements.txt ---\nfastapi\nuvicorn[standard]\n\n--- file: Dockerfile ---\nFROM python:3.11-slim\n\nWORKDIR /app\n\nCOPY backend/requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY backend/ .\n\nENV PORT=8080\nEXPOSE 8080\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n\n--- file: README.md ---\n# Fire Department: FastAPI backend + Vite + React + Tailwind SPA\n\nThis repo contains:\n- A FastAPI backend (Cloud Run-ready) with endpoints for fire department stats, stations, and incidents.\n- A Vite + React + TailwindCSS frontend SPA deployed on Firebase Hosting, with rewrites to the Cloud Run backend.\n\n## Local development\n\nTerminal 1: Backend\n- python -m venv .venv && source .venv/bin/activate\n- pip install -r backend/requirements.txt\n- uvicorn backend.main:app --reload --port 8080\n\nTerminal 2: Frontend\n- cd frontend\n- npm install\n- npm run dev\n- Open http://localhost:5173\n\nThe dev server proxies /api to http://localhost:8080.\n\n## Build and Deploy (GCP Artifact Registry + Cloud Run + Firebase Hosting)\n\n1) Build backend image\n- export REGION=<your-region>\n- export PROJECT_ID=<your-gcp-project-id>\n- export REPO=fire-dept\n- gcloud auth configure-docker \"${REGION}-docker.pkg.dev\"\n- docker build -t \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" .\n- docker push \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\"\n\n2) Deploy to Cloud Run\n- gcloud run deploy fire-backend \\\n  --image \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" \\\n  --platform managed \\\n  --region \"${REGION}\" \\\n  --allow-unauthenticated \\\n  --port 8080\n\n3) Configure Firebase Hosting rewrite\n- Update firebase.json:\n  - serviceId: the Cloud Run service name (e.g., fire-backend)\n  - region: the Cloud Run region\n\n4) Build frontend\n- cd frontend\n- npm install\n- npm run build\n\n5) Deploy frontend to Firebase Hosting\n- firebase login\n- firebase init hosting (select existing project, set public to frontend/dist, single-page app yes)\n- firebase deploy --only hosting\n\n## API endpoints\n\n- GET /api/hello\n- GET /api/stats\n- GET /api/stations\n- GET /api/stations/{station_id}\n- GET /api/incidents\n  - Optional query params: status, severity\n- GET /api/incidents/{incident_id}\n\n## Firebase Hosting\n\nfirebase.json includes:\n- Rewrite /api/** to your Cloud Run service\n- SPA fallback to /index.html for client-side routing\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"fire-dept-frontend\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --port 4173\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-router-dom\": \"^6.26.2\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.14\",\n    \"vite\": \"^5.4.6\"\n  }\n}\n\n--- file: frontend/vite.config.js ---\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 5173,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:8080',\n        changeOrigin: true\n      }\n    }\n  }\n})\n\n--- file: frontend/index.html ---\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>City Fire Department</title>\n  </head>\n  <body class=\"bg-gray-50\">\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>\n\n--- file: frontend/postcss.config.cjs ---\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n\n--- file: frontend/tailwind.config.cjs ---\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./index.html\", \"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        fire: {\n          red: \"#E11D48\",\n          dark: \"#7F1D1D\",\n          amber: \"#F59E0B\"\n        }\n      }\n    },\n  },\n  plugins: [],\n}\n\n--- file: frontend/src/main.jsx ---\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n)\n\n--- file: frontend/src/index.css ---\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom styles */\n:root {\n  --brand: #E11D48;\n}\n\nhtml, body, #root {\n  height: 100%;\n}\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './pages/Home';\nimport Stats from './pages/Stats';\nimport Stations from './pages/Stations';\nimport Incidents from './pages/Incidents';\n\nexport default function App() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <NavBar />\n      <main className=\"flex-1 container mx-auto px-4 py-6\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/stats\" element={<Stats />} />\n          <Route path=\"/stations\" element={<Stations />} />\n          <Route path=\"/incidents\" element={<Incidents />} />\n        </Routes>\n      </main>\n      <footer className=\"bg-gray-100 border-t py-4\">\n        <div className=\"container mx-auto px-4 text-sm text-gray-600\">\n          \u00a9 {new Date().getFullYear()} City Fire Department. All rights reserved.\n        </div>\n      </footer>\n    </div>\n  );\n}\n\n--- file: frontend/src/components/NavBar.jsx ---\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst navClasses = ({ isActive }) =>\n  `px-3 py-2 rounded-md text-sm font-medium ${\n    isActive ? 'bg-fire.red text-white' : 'text-gray-700 hover:bg-gray-100'\n  }`;\n\nexport default function NavBar() {\n  return (\n    <header className=\"bg-white border-b\">\n      <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <span className=\"inline-flex items-center justify-center w-10 h-10 rounded-full bg-fire.red text-white font-bold\">\n            FD\n          </span>\n          <div>\n            <div className=\"text-xl font-semibold\">City Fire Department</div>\n            <div className=\"text-xs text-gray-500 -mt-1\">Serving our community with pride</div>\n          </div>\n        </div>\n        <nav className=\"flex items-center gap-2\">\n          <NavLink to=\"/\" className={navClasses} end>Home</NavLink>\n          <NavLink to=\"/stats\" className={navClasses}>Stats</NavLink>\n          <NavLink to=\"/stations\" className={navClasses}>Stations</NavLink>\n          <NavLink to=\"/incidents\" className={navClasses}>Incidents</NavLink>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\n--- file: frontend/src/components/StatCard.jsx ---\nimport React from 'react';\n\nexport default function StatCard({ label, value, color = 'bg-white', accent = 'text-fire.red' }) {\n  return (\n    <div className={`rounded-lg border shadow-sm ${color}`}>\n      <div className=\"p-4\">\n        <div className=\"text-sm text-gray-500\">{label}</div>\n        <div className={`text-3xl font-bold mt-1 ${accent}`}>{value}</div>\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Home.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\n\nexport default function Home() {\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then((r) => r.json())\n      .then(setStats)\n      .catch(() => setStats(null));\n  }, []);\n\n  return (\n    <div className=\"space-y-8\">\n      <section className=\"rounded-xl bg-gradient-to-r from-fire.dark to-fire.red text-white p-8\">\n        <h1 className=\"text-3xl md:text-4xl font-bold\">City Fire Department</h1>\n        <p className=\"mt-2 text-white/90\">\n          Rapid response. Community safety. Professional service.\n        </p>\n        <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {stats ? (\n            <>\n              <StatCard label=\"Calls Today\" value={stats.calls_today} color=\"bg-white/10\" accent=\"text-white\" />\n              <StatCard label=\"This Month\" value={stats.calls_this_month} color=\"bg-white/10\" accent=\"text-white\" />\n              <StatCard label=\"Avg Response (min)\" value={stats.avg_response_time_min} color=\"bg-white/10\" accent=\"text-white\" />\n              <StatCard label=\"Active Incidents\" value={stats.active_incidents} color=\"bg-white/10\" accent=\"text-white\" />\n            </>\n          ) : (\n            <>\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n            </>\n          )}\n        </div>\n      </section>\n\n      <section>\n        <h2 className=\"text-xl font-semibold mb-3\">About Us</h2>\n        <p className=\"text-gray-700\">\n          The City Fire Department is committed to protecting life, property, and the environment\n          through prevention, education, emergency response, and community partnerships.\n        </p>\n      </section>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\n\nexport default function Stats() {\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats').then(r => r.json()).then(setStats);\n  }, []);\n\n  if (!stats) {\n    return <div>Loading stats...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-2xl font-semibold\">Department Statistics</h1>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <StatCard label=\"Calls Today\" value={stats.calls_today} />\n        <StatCard label=\"Calls This Month\" value={stats.calls_this_month} />\n        <StatCard label=\"Avg Response Time (min)\" value={stats.avg_response_time_min} />\n        <StatCard label=\"Active Incidents\" value={stats.active_incidents} />\n        <StatCard label=\"Firefighters On Duty\" value={stats.firefighters_on_duty} />\n        <StatCard label=\"Stations\" value={stats.stations} />\n      </div>\n      <div className=\"text-sm text-gray-500\">Last updated: {new Date(stats.last_updated).toLocaleString()}</div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stations.jsx ---\nimport React, { useEffect, useState } from 'react';\n\nexport default function Stations() {\n  const [stations, setStations] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/stations').then(r => r.json()).then((data) => setStations(data.stations || []));\n  }, []);\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-semibold mb-4\">Stations</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {stations.map((s) => (\n          <div key={s.id} className=\"rounded-lg border bg-white shadow-sm p-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">{s.name}</h3>\n              <span className=\"text-xs px-2 py-1 rounded-full bg-amber-100 text-amber-700\">\n                Apparatus: {s.apparatus_count}\n              </span>\n            </div>\n            <div className=\"text-sm text-gray-600 mt-1\">{s.address}</div>\n            <div className=\"mt-3 flex items-center gap-3 text-sm\">\n              <span className=\"inline-flex items-center gap-1 rounded-md bg-red-50 text-fire.red px-2 py-1\">\n                On Duty: <strong>{s.on_duty_count}</strong>\n              </span>\n              <span className=\"text-gray-500\">ID: {s.id}</span>\n            </div>\n          </div>\n        ))}\n        {stations.length === 0 && <div className=\"text-gray-600\">No stations found.</div>}\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Incidents.jsx ---\nimport React, { useEffect, useMemo, useState } from 'react';\n\nconst severityBadge = (severity) => {\n  const map = {\n    Low: 'bg-gray-100 text-gray-700',\n    Moderate: 'bg-amber-100 text-amber-800',\n    High: 'bg-orange-100 text-orange-800',\n    Critical: 'bg-red-100 text-red-800'\n  };\n  return map[severity] || 'bg-gray-100 text-gray-700';\n};\n\nexport default function Incidents() {\n  const [incidents, setIncidents] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [severity, setSeverity] = useState('all');\n\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (status !== 'all') params.append('status', status);\n    if (severity !== 'all') params.append('severity', severity);\n    const query = params.toString() ? `?${params.toString()}` : '';\n    fetch(`/api/incidents${query}`)\n      .then(r => r.json())\n      .then((data) => setIncidents(data.incidents || []));\n  }, [status, severity]);\n\n  const activeCount = useMemo(() => incidents.filter(i => i.status === 'Active').length, [incidents]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between gap-3\">\n        <h1 className=\"text-2xl font-semibold\">Incidents</h1>\n        <div className=\"flex items-center gap-2\">\n          <select className=\"border rounded-md px-2 py-1\" value={status} onChange={(e) => setStatus(e.target.value)}>\n            <option value=\"all\">All Status</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Cleared\">Cleared</option>\n          </select>\n          <select className=\"border rounded-md px-2 py-1\" value={severity} onChange={(e) => setSeverity(e.target.value)}>\n            <option value=\"all\">All Severity</option>\n            <option value=\"Low\">Low</option>\n            <option value=\"Moderate\">Moderate</option>\n            <option value=\"High\">High</option>\n            <option value=\"Critical\">Critical</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"text-sm text-gray-600\">Active: {activeCount}</div>\n\n      <div className=\"overflow-x-auto rounded-lg border bg-white\">\n        <table className=\"min-w-full text-sm\">\n          <thead className=\"bg-gray-50 text-gray-600\">\n            <tr>\n              <th className=\"text-left px-4 py-2\">ID</th>\n              <th className=\"text-left px-4 py-2\">Type</th>\n              <th className=\"text-left px-4 py-2\">Severity</th>\n              <th className=\"text-left px-4 py-2\">Status</th>\n              <th className=\"text-left px-4 py-2\">Address</th>\n              <th className=\"text-left px-4 py-2\">Reported</th>\n              <th className=\"text-left px-4 py-2\">Units</th>\n            </tr>\n          </thead>\n          <tbody>\n            {incidents.map((i) => (\n              <tr key={i.id} className=\"border-t\">\n                <td className=\"px-4 py-2\">{i.id}</td>\n                <td className=\"px-4 py-2\">{i.type}</td>\n                <td className=\"px-4 py-2\">\n                  <span className={`px-2 py-1 rounded-full text-xs ${severityBadge(i.severity)}`}>\n                    {i.severity}\n                  </span>\n                </td>\n                <td className=\"px-4 py-2\">{i.status}</td>\n                <td className=\"px-4 py-2\">{i.address}</td>\n                <td className=\"px-4 py-2\">{new Date(i.reported_at).toLocaleString()}</td>\n                <td className=\"px-4 py-2\">{i.units_responding.join(', ')}</td>\n              </tr>\n            ))}\n            {incidents.length === 0 && (\n              <tr>\n                <td className=\"px-4 py-6 text-center text-gray-500\" colSpan={7}>\n                  No incidents found for the selected filters.\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n--- file: firebase.json ---\n{\n  \"hosting\": {\n    \"public\": \"frontend/dist\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ],\n    \"rewrites\": [\n      {\n        \"source\": \"/api/**\",\n        \"run\": {\n          \"serviceId\": \"fire-backend\",\n          \"region\": \"<your-region>\"\n        }\n      },\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}"
  },
  {
    "role": "user",
    "content": "keep buikding out the FastAPI backend + Vite+React SPA site and make it about the fire department."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom datetime import datetime, timedelta, timezone\nfrom typing import List, Optional, Literal\n\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\n\napp = FastAPI(title=\"Fire Department API\", version=\"1.1.0\")\n\n# Allow frontend dev server in local development\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5173\", \"http://127.0.0.1:5173\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# In-memory sample data\nUTC = timezone.utc\n\nSTATIONS = [\n    {\n        \"id\": 1,\n        \"name\": \"Station 1 - Central\",\n        \"address\": \"100 Main St\",\n        \"apparatus_count\": 4,\n        \"on_duty_count\": 12,\n        \"lat\": 47.6062,\n        \"lng\": -122.3321,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Station 2 - North\",\n        \"address\": \"220 North Ave\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 9,\n        \"lat\": 47.6756,\n        \"lng\": -122.2711,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Station 3 - South\",\n        \"address\": \"450 South Blvd\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 8,\n        \"lat\": 47.5233,\n        \"lng\": -122.3550,\n    },\n]\n\nnow = datetime.now(tz=UTC)\nINCIDENTS = [\n    {\n        \"id\": 101,\n        \"type\": \"Structure Fire\",\n        \"severity\": \"Critical\",\n        \"status\": \"Active\",\n        \"address\": \"742 Evergreen Terrace\",\n        \"reported_at\": (now - timedelta(minutes=12)).isoformat(),\n        \"units_responding\": [\"E1\", \"T1\", \"B1\", \"M3\"],\n        \"station_id\": 1,\n    },\n    {\n        \"id\": 102,\n        \"type\": \"Medical Aid\",\n        \"severity\": \"Moderate\",\n        \"status\": \"Cleared\",\n        \"address\": \"88 Lakeview Rd\",\n        \"reported_at\": (now - timedelta(hours=3, minutes=5)).isoformat(),\n        \"units_responding\": [\"M2\"],\n        \"station_id\": 2,\n    },\n    {\n        \"id\": 103,\n        \"type\": \"Vehicle Accident\",\n        \"severity\": \"High\",\n        \"status\": \"Active\",\n        \"address\": \"I-5 S & Exit 163\",\n        \"reported_at\": (now - timedelta(minutes=34)).isoformat(),\n        \"units_responding\": [\"E3\", \"M4\", \"B2\"],\n        \"station_id\": 3,\n    },\n    {\n        \"id\": 104,\n        \"type\": \"Alarm Bell\",\n        \"severity\": \"Low\",\n        \"status\": \"Cleared\",\n        \"address\": \"55 Commerce Park\",\n        \"reported_at\": (now - timedelta(days=1, hours=2)).isoformat(),\n        \"units_responding\": [\"E2\"],\n        \"station_id\": 2,\n    },\n]\n\n\ndef month_start(dt: datetime) -> datetime:\n    return dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n\n\ndef compute_stats():\n    _now = datetime.now(tz=UTC)\n    calls_today = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]).date() == _now.date()\n    )\n    calls_this_month = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]) >= month_start(_now)\n    )\n    active_incidents = sum(1 for i in INCIDENTS if i[\"status\"].lower() == \"active\")\n    avg_response_time_min = 5.7  # mock\n    firefighters_on_duty = sum(s[\"on_duty_count\"] for s in STATIONS)\n    stations_count = len(STATIONS)\n    return {\n        \"calls_today\": calls_today,\n        \"calls_this_month\": calls_this_month,\n        \"avg_response_time_min\": avg_response_time_min,\n        \"active_incidents\": active_incidents,\n        \"firefighters_on_duty\": firefighters_on_duty,\n        \"stations\": stations_count,\n        \"last_updated\": _now.isoformat(),\n    }\n\n\ndef next_incident_id() -> int:\n    return (max((i[\"id\"] for i in INCIDENTS), default=100)) + 1\n\n\ndef ensure_station_exists(station_id: int):\n    if not any(s[\"id\"] == station_id for s in STATIONS):\n        raise HTTPException(status_code=400, detail=\"Invalid station_id\")\n\n\ndef calls_by_day(days: int = 14):\n    _now = datetime.now(tz=UTC)\n    buckets = {}\n    for d in range(days):\n        day = (_now - timedelta(days=d)).date().isoformat()\n        buckets[day] = 0\n    for i in INCIDENTS:\n        d = datetime.fromisoformat(i[\"reported_at\"]).date().isoformat()\n        if d in buckets:\n            buckets[d] += 1\n    # return in ascending date order\n    series = [{\"date\": k, \"count\": buckets[k]} for k in sorted(buckets.keys())]\n    return series\n\n\nclass IncidentCreate(BaseModel):\n    type: str\n    severity: Literal[\"Low\", \"Moderate\", \"High\", \"Critical\"]\n    address: str\n    station_id: int\n    units_responding: List[str] = Field(default_factory=list)\n\n\nclass IncidentUpdate(BaseModel):\n    status: Optional[Literal[\"Active\", \"Cleared\"]] = None\n    severity: Optional[Literal[\"Low\", \"Moderate\", \"High\", \"Critical\"]] = None\n    address: Optional[str] = None\n    units_responding: Optional[List[str]] = None\n\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Welcome to the Fire Department API\"}\n\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return compute_stats()\n\n\n@app.get(\"/api/metrics/calls_by_day\")\nasync def metrics_calls_by_day(days: int = 14):\n    if days < 1 or days > 60:\n        raise HTTPException(status_code=400, detail=\"days must be between 1 and 60\")\n    return {\"series\": calls_by_day(days)}\n\n\n@app.get(\"/api/stations\")\nasync def list_stations():\n    return {\"stations\": STATIONS}\n\n\n@app.get(\"/api/stations/{station_id}\")\nasync def get_station(station_id: int):\n    station = next((s for s in STATIONS if s[\"id\"] == station_id), None)\n    if not station:\n        raise HTTPException(status_code=404, detail=\"Station not found\")\n    incidents = [i for i in INCIDENTS if i[\"station_id\"] == station_id]\n    return {\"station\": station, \"recent_incidents\": incidents}\n\n\n@app.get(\"/api/incidents\")\nasync def list_incidents(status: Optional[str] = None, severity: Optional[str] = None):\n    data = INCIDENTS\n    if status:\n        data = [i for i in data if i[\"status\"].lower() == status.lower()]\n    if severity:\n        data = [i for i in data if i[\"severity\"].lower() == severity.lower()]\n    return {\"incidents\": data}\n\n\n@app.get(\"/api/incidents/{incident_id}\")\nasync def get_incident(incident_id: int):\n    incident = next((i for i in INCIDENTS if i[\"id\"] == incident_id), None)\n    if not incident:\n        raise HTTPException(status_code=404, detail=\"Incident not found\")\n    station = next((s for s in STATIONS if s[\"id\"] == incident[\"station_id\"]), None)\n    return {\"incident\": incident, \"station\": station}\n\n\n@app.post(\"/api/incidents\", status_code=201)\nasync def create_incident(payload: IncidentCreate):\n    ensure_station_exists(payload.station_id)\n    incident = {\n        \"id\": next_incident_id(),\n        \"type\": payload.type,\n        \"severity\": payload.severity,\n        \"status\": \"Active\",\n        \"address\": payload.address,\n        \"reported_at\": datetime.now(tz=UTC).isoformat(),\n        \"units_responding\": payload.units_responding or [],\n        \"station_id\": payload.station_id,\n    }\n    INCIDENTS.insert(0, incident)\n    return {\"incident\": incident}\n\n\n@app.patch(\"/api/incidents/{incident_id}\")\nasync def update_incident(incident_id: int, payload: IncidentUpdate):\n    incident = next((i for i in INCIDENTS if i[\"id\"] == incident_id), None)\n    if not incident:\n        raise HTTPException(status_code=404, detail=\"Incident not found\")\n\n    if payload.status is not None:\n        incident[\"status\"] = payload.status\n    if payload.severity is not None:\n        incident[\"severity\"] = payload.severity\n    if payload.address is not None:\n        incident[\"address\"] = payload.address\n    if payload.units_responding is not None:\n        incident[\"units_responding\"] = payload.units_responding\n\n    return {\"incident\": incident}\n\n--- file: README.md ---\n# Fire Department: FastAPI backend + Vite + React + Tailwind SPA\n\nThis repo contains:\n- A FastAPI backend (Cloud Run-ready) with endpoints for fire department stats, stations, incidents, and basic metrics.\n- A Vite + React + TailwindCSS frontend SPA deployed on Firebase Hosting, with rewrites to the Cloud Run backend.\n\n## Local development\n\nTerminal 1: Backend\n- python -m venv .venv && source .venv/bin/activate\n- pip install -r backend/requirements.txt\n- uvicorn backend.main:app --reload --port 8080\n\nTerminal 2: Frontend\n- cd frontend\n- npm install\n- npm run dev\n- Open http://localhost:5173\n\nThe dev server proxies /api to http://localhost:8080.\n\n## Build and Deploy (GCP Artifact Registry + Cloud Run + Firebase Hosting)\n\n1) Build backend image\n- export REGION=<your-region>\n- export PROJECT_ID=<your-gcp-project-id>\n- export REPO=fire-dept\n- gcloud auth configure-docker \"${REGION}-docker.pkg.dev\"\n- docker build -t \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" .\n- docker push \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\"\n\n2) Deploy to Cloud Run\n- gcloud run deploy fire-backend \\\n  --image \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" \\\n  --platform managed \\\n  --region \"${REGION}\" \\\n  --allow-unauthenticated \\\n  --port 8080\n\n3) Configure Firebase Hosting rewrite\n- Update firebase.json:\n  - serviceId: the Cloud Run service name (e.g., fire-backend)\n  - region: the Cloud Run region\n\n4) Build frontend\n- cd frontend\n- npm install\n- npm run build\n\n5) Deploy frontend to Firebase Hosting\n- firebase login\n- firebase init hosting (select existing project, set public to frontend/dist, single-page app yes)\n- firebase deploy --only hosting\n\n## API endpoints\n\n- GET /api/hello\n- GET /api/stats\n- GET /api/metrics/calls_by_day?days=14\n- GET /api/stations\n- GET /api/stations/{station_id}\n- GET /api/incidents\n  - Optional query params: status, severity\n- GET /api/incidents/{incident_id}\n- POST /api/incidents\n  - body: { type, severity[\"Low\"|\"Moderate\"|\"High\"|\"Critical\"], address, station_id, units_responding[] }\n- PATCH /api/incidents/{incident_id}\n  - body: partial update of { status[\"Active\"|\"Cleared\"], severity, address, units_responding[] }\n\nNote: Data is in-memory for demo purposes.\n\n## Frontend routes\n\n- / \u2014 Home with hero and summary stats\n- /stats \u2014 Dashboard stats with a calls-by-day chart\n- /stations \u2014 Stations grid\n- /stations/:id \u2014 Station details with recent incidents\n- /incidents \u2014 Incidents table with filters\n- /incidents/:id \u2014 Incident details and status control\n- /report \u2014 Report a new incident form\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"fire-dept-frontend\",\n  \"version\": \"1.1.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --port 4173\"\n  },\n  \"dependencies\": {\n    \"chart.js\": \"^4.4.3\",\n    \"react\": \"^18.3.1\",\n    \"react-chartjs-2\": \"^5.2.0\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-router-dom\": \"^6.26.2\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.14\",\n    \"vite\": \"^5.4.6\"\n  }\n}\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './pages/Home';\nimport Stats from './pages/Stats';\nimport Stations from './pages/Stations';\nimport StationDetails from './pages/StationDetails';\nimport Incidents from './pages/Incidents';\nimport IncidentDetails from './pages/IncidentDetails';\nimport Report from './pages/Report';\n\nexport default function App() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <NavBar />\n      <main className=\"flex-1 container mx-auto px-4 py-6\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/stats\" element={<Stats />} />\n          <Route path=\"/stations\" element={<Stations />} />\n          <Route path=\"/stations/:id\" element={<StationDetails />} />\n          <Route path=\"/incidents\" element={<Incidents />} />\n          <Route path=\"/incidents/:id\" element={<IncidentDetails />} />\n          <Route path=\"/report\" element={<Report />} />\n        </Routes>\n      </main>\n      <footer className=\"bg-gray-100 border-t py-4\">\n        <div className=\"container mx-auto px-4 text-sm text-gray-600\">\n          \u00a9 {new Date().getFullYear()} City Fire Department. All rights reserved.\n        </div>\n      </footer>\n    </div>\n  );\n}\n\n--- file: frontend/src/components/NavBar.jsx ---\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst navClasses = ({ isActive }) =>\n  `px-3 py-2 rounded-md text-sm font-medium ${\n    isActive ? 'bg-fire-red text-white' : 'text-gray-700 hover:bg-gray-100'\n  }`;\n\nexport default function NavBar() {\n  return (\n    <header className=\"bg-white border-b\">\n      <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <span className=\"inline-flex items-center justify-center w-10 h-10 rounded-full bg-fire-red text-white font-bold\">\n            FD\n          </span>\n          <div>\n            <div className=\"text-xl font-semibold\">City Fire Department</div>\n            <div className=\"text-xs text-gray-500 -mt-1\">Serving our community with pride</div>\n          </div>\n        </div>\n        <nav className=\"flex items-center gap-2\">\n          <NavLink to=\"/\" className={navClasses} end>Home</NavLink>\n          <NavLink to=\"/stats\" className={navClasses}>Stats</NavLink>\n          <NavLink to=\"/stations\" className={navClasses}>Stations</NavLink>\n          <NavLink to=\"/incidents\" className={navClasses}>Incidents</NavLink>\n          <NavLink to=\"/report\" className={navClasses}>Report</NavLink>\n        </nav>\n      </div>\n    </header>\n  );\n}\n\n--- file: frontend/src/components/StatCard.jsx ---\nimport React from 'react';\n\nexport default function StatCard({ label, value, color = 'bg-white', accent = 'text-fire-red' }) {\n  return (\n    <div className={`rounded-lg border shadow-sm ${color}`}>\n      <div className=\"p-4\">\n        <div className=\"text-sm text-gray-500\">{label}</div>\n        <div className={`text-3xl font-bold mt-1 ${accent}`}>{value}</div>\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/components/LineChart.jsx ---\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  LineElement,\n  PointElement,\n  LinearScale,\n  CategoryScale,\n  Tooltip,\n  Filler,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(LineElement, PointElement, LinearScale, CategoryScale, Tooltip, Filler, Legend);\n\nexport default function LineChart({ labels, values }) {\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: 'Calls',\n        data: values,\n        fill: true,\n        borderColor: '#E11D48',\n        backgroundColor: 'rgba(225, 29, 72, 0.12)',\n        pointBackgroundColor: '#E11D48',\n        pointBorderColor: '#fff',\n        tension: 0.25,\n      },\n    ],\n  };\n  const options = {\n    responsive: true,\n    plugins: { legend: { display: false } },\n    scales: {\n      x: { grid: { display: false } },\n      y: { beginAtZero: true, ticks: { precision: 0 } },\n    },\n  };\n  return <Line data={data} options={options} height={80} />;\n}\n\n--- file: frontend/src/pages/Home.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\n\nexport default function Home() {\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then((r) => r.json())\n      .then(setStats)\n      .catch(() => setStats(null));\n  }, []);\n\n  return (\n    <div className=\"space-y-8\">\n      <section className=\"rounded-xl bg-gradient-to-r from-fire-dark to-fire-red text-white p-8\">\n        <h1 className=\"text-3xl md:text-4xl font-bold\">City Fire Department</h1>\n        <p className=\"mt-2 text-white/90\">\n          Rapid response. Community safety. Professional service.\n        </p>\n        <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {stats ? (\n            <>\n              <StatCard label=\"Calls Today\" value={stats.calls_today} color=\"bg-white/10\" accent=\"text-white\" />\n              <StatCard label=\"This Month\" value={stats.calls_this_month} color=\"bg-white/10\" accent=\"text-white\" />\n              <StatCard label=\"Avg Response (min)\" value={stats.avg_response_time_min} color=\"bg-white/10\" accent=\"text-white\" />\n              <StatCard label=\"Active Incidents\" value={stats.active_incidents} color=\"bg-white/10\" accent=\"text-white\" />\n            </>\n          ) : (\n            <>\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n              <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n            </>\n          )}\n        </div>\n      </section>\n\n      <section>\n        <h2 className=\"text-xl font-semibold mb-3\">About Us</h2>\n        <p className=\"text-gray-700\">\n          The City Fire Department is committed to protecting life, property, and the environment\n          through prevention, education, emergency response, and community partnerships.\n        </p>\n      </section>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\nimport LineChart from '../components/LineChart';\n\nexport default function Stats() {\n  const [stats, setStats] = useState(null);\n  const [series, setSeries] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats').then(r => r.json()).then(setStats);\n    fetch('/api/metrics/calls_by_day?days=14').then(r => r.json()).then((d) => setSeries(d.series));\n  }, []);\n\n  if (!stats) {\n    return <div>Loading stats...</div>;\n  }\n\n  const labels = series ? series.map(p => p.date.slice(5)) : [];\n  const values = series ? series.map(p => p.count) : [];\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-2xl font-semibold\">Department Statistics</h1>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <StatCard label=\"Calls Today\" value={stats.calls_today} />\n        <StatCard label=\"Calls This Month\" value={stats.calls_this_month} />\n        <StatCard label=\"Avg Response Time (min)\" value={stats.avg_response_time_min} />\n        <StatCard label=\"Active Incidents\" value={stats.active_incidents} />\n        <StatCard label=\"Firefighters On Duty\" value={stats.firefighters_on_duty} />\n        <StatCard label=\"Stations\" value={stats.stations} />\n      </div>\n\n      <div className=\"rounded-lg border bg-white p-4\">\n        <div className=\"text-sm text-gray-500 mb-2\">Calls (last 14 days)</div>\n        {series ? <LineChart labels={labels} values={values} /> : <div>Loading chart...</div>}\n      </div>\n\n      <div className=\"text-sm text-gray-500\">Last updated: {new Date(stats.last_updated).toLocaleString()}</div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stations.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Stations() {\n  const [stations, setStations] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/stations').then(r => r.json()).then((data) => setStations(data.stations || []));\n  }, []);\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-semibold mb-4\">Stations</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {stations.map((s) => (\n          <Link key={s.id} to={`/stations/${s.id}`} className=\"rounded-lg border bg-white shadow-sm p-4 block hover:shadow-md transition\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">{s.name}</h3>\n              <span className=\"text-xs px-2 py-1 rounded-full bg-amber-100 text-amber-700\">\n                Apparatus: {s.apparatus_count}\n              </span>\n            </div>\n            <div className=\"text-sm text-gray-600 mt-1\">{s.address}</div>\n            <div className=\"mt-3 flex items-center gap-3 text-sm\">\n              <span className=\"inline-flex items-center gap-1 rounded-md bg-red-50 text-fire-red px-2 py-1\">\n                On Duty: <strong>{s.on_duty_count}</strong>\n              </span>\n              <span className=\"text-gray-500\">ID: {s.id}</span>\n            </div>\n          </Link>\n        ))}\n        {stations.length === 0 && <div className=\"text-gray-600\">No stations found.</div>}\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Incidents.jsx ---\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\n\nconst severityBadge = (severity) => {\n  const map = {\n    Low: 'bg-gray-100 text-gray-700',\n    Moderate: 'bg-amber-100 text-amber-800',\n    High: 'bg-orange-100 text-orange-800',\n    Critical: 'bg-red-100 text-red-800'\n  };\n  return map[severity] || 'bg-gray-100 text-gray-700';\n};\n\nexport default function Incidents() {\n  const [incidents, setIncidents] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [severity, setSeverity] = useState('all');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const params = new URLSearchParams();\n    if (status !== 'all') params.append('status', status);\n    if (severity !== 'all') params.append('severity', severity);\n    const query = params.toString() ? `?${params.toString()}` : '';\n    fetch(`/api/incidents${query}`)\n      .then(r => r.json())\n      .then((data) => setIncidents(data.incidents || []));\n  }, [status, severity]);\n\n  const activeCount = useMemo(() => incidents.filter(i => i.status === 'Active').length, [incidents]);\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between gap-3\">\n        <h1 className=\"text-2xl font-semibold\">Incidents</h1>\n        <div className=\"flex items-center gap-2\">\n          <Link to=\"/report\" className=\"px-3 py-2 rounded-md bg-fire-red text-white text-sm\">Report Incident</Link>\n          <select className=\"border rounded-md px-2 py-1\" value={status} onChange={(e) => setStatus(e.target.value)}>\n            <option value=\"all\">All Status</option>\n            <option value=\"Active\">Active</option>\n            <option value=\"Cleared\">Cleared</option>\n          </select>\n          <select className=\"border rounded-md px-2 py-1\" value={severity} onChange={(e) => setSeverity(e.target.value)}>\n            <option value=\"all\">All Severity</option>\n            <option value=\"Low\">Low</option>\n            <option value=\"Moderate\">Moderate</option>\n            <option value=\"High\">High</option>\n            <option value=\"Critical\">Critical</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"text-sm text-gray-600\">Active: {activeCount}</div>\n\n      <div class"
  },
  {
    "role": "user",
    "content": "keep buikding out the FastAPI backend + Vite+React SPA site and make it about the fire department."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom datetime import datetime, timedelta, timezone\nfrom typing import List, Optional, Literal\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\n\napp = FastAPI(title=\"Fire Department API\", version=\"1.1.0\")\n\n# Allow frontend dev server in local development\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5173\", \"http://127.0.0.1:5173\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# In-memory sample data\nUTC = timezone.utc\n\nSTATIONS = [\n    {\n        \"id\": 1,\n        \"name\": \"Station 1 - Central\",\n        \"address\": \"100 Main St\",\n        \"apparatus_count\": 4,\n        \"on_duty_count\": 12,\n        \"lat\": 47.6062,\n        \"lng\": -122.3321,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Station 2 - North\",\n        \"address\": \"220 North Ave\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 9,\n        \"lat\": 47.6756,\n        \"lng\": -122.2711,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Station 3 - South\",\n        \"address\": \"450 South Blvd\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 8,\n        \"lat\": 47.5233,\n        \"lng\": -122.3550,\n    },\n]\n\nnow = datetime.now(tz=UTC)\nINCIDENTS = [\n    {\n        \"id\": 101,\n        \"type\": \"Structure Fire\",\n        \"severity\": \"Critical\",\n        \"status\": \"Active\",\n        \"address\": \"742 Evergreen Terrace\",\n        \"reported_at\": (now - timedelta(minutes=12)).isoformat(),\n        \"units_responding\": [\"E1\", \"T1\", \"B1\", \"M3\"],\n        \"station_id\": 1,\n    },\n    {\n        \"id\": 102,\n        \"type\": \"Medical Aid\",\n        \"severity\": \"Moderate\",\n        \"status\": \"Cleared\",\n        \"address\": \"88 Lakeview Rd\",\n        \"reported_at\": (now - timedelta(hours=3, minutes=5)).isoformat(),\n        \"units_responding\": [\"M2\"],\n        \"station_id\": 2,\n    },\n    {\n        \"id\": 103,\n        \"type\": \"Vehicle Accident\",\n        \"severity\": \"High\",\n        \"status\": \"Active\",\n        \"address\": \"I-5 S & Exit 163\",\n        \"reported_at\": (now - timedelta(minutes=34)).isoformat(),\n        \"units_responding\": [\"E3\", \"M4\", \"B2\"],\n        \"station_id\": 3,\n    },\n    {\n        \"id\": 104,\n        \"type\": \"Alarm Bell\",\n        \"severity\": \"Low\",\n        \"status\": \"Cleared\",\n        \"address\": \"55 Commerce Park\",\n        \"reported_at\": (now - timedelta(days=1, hours=2)).isoformat(),\n        \"units_responding\": [\"E2\"],\n        \"station_id\": 2,\n    },\n]\n\ndef month_start(dt: datetime) -> datetime:\n    return dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n\ndef compute_stats():\n    _now = datetime.now(tz=UTC)\n    calls_today = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]).date() == _now.date()\n    )\n    calls_this_month = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]) >= month_start(_now)\n    )\n    active_incidents = sum(1 for i in INCIDENTS if i[\"status\"].lower() == \"active\")\n    avg_response_time_min = 5.7  # mock\n    firefighters_on_duty = sum(s[\"on_duty_count\"] for s in STATIONS)\n    stations_count = len(STATIONS)\n    return {\n        \"calls_today\": calls_today,\n        \"calls_this_month\": calls_this_month,\n        \"avg_response_time_min\": avg_response_time_min,\n        \"active_incidents\": active_incidents,\n        \"firefighters_on_duty\": firefighters_on_duty,\n        \"stations\": stations_count,\n        \"last_updated\": _now.isoformat(),\n    }\n\ndef next_incident_id() -> int:\n    return (max((i[\"id\"] for i in INCIDENTS), default=100)) + 1\n\ndef ensure_station_exists(station_id: int):\n    if not any(s[\"id\"] == station_id for s in STATIONS):\n        raise HTTPException(status_code=400, detail=\"Invalid station_id\")\n\nclass IncidentCreate(BaseModel):\n    type: str\n    severity: Literal[\"Low\", \"Moderate\", \"High\", \"Critical\"]\n    address: str\n    station_id: int\n    units_responding: List[str] = Field(default_factory=list)\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Welcome to the Fire Department API\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return compute_stats()\n\n@app.get(\"/api/stations\")\nasync def list_stations():\n    return {\"stations\": STATIONS}\n\n@app.post(\"/api/incidents\", status_code=201)\nasync def create_incident(payload: IncidentCreate):\n    ensure_station_exists(payload.station_id)\n    incident = {\n        \"id\": next_incident_id(),\n        \"type\": payload.type,\n        \"severity\": payload.severity,\n        \"status\": \"Active\",\n        \"address\": payload.address,\n        \"reported_at\": datetime.now(tz=UTC).isoformat(),\n        \"units_responding\": payload.units_responding or [],\n        \"station_id\": payload.station_id,\n    }\n    INCIDENTS.insert(0, incident)\n    return {\"incident\": incident}\n\n# Additional incident handling and stats can be added similarly\n\n--- file: README.md ---\n# Fire Department: FastAPI backend + Vite + React + Tailwind SPA\n\nThis repo contains:\n- A FastAPI backend (Cloud Run-ready) with endpoints for fire department stats, stations, and incidents.\n- A Vite + React + TailwindCSS frontend SPA deployed on Firebase Hosting, with rewrites to the Cloud Run backend.\n\n## Local Development\n\n### Terminal 1: Backend\n- python -m venv .venv && source .venv/bin/activate\n- pip install -r backend/requirements.txt\n- uvicorn backend.main:app --reload --port 8080\n\n### Terminal 2: Frontend\n- cd frontend\n- npm install\n- npm run dev\n- Open http://localhost:5173\n\nThe dev server proxies /api to http://localhost:8080.\n\n## Build and Deploy (GCP Artifact Registry + Cloud Run + Firebase Hosting)\n\n1. **Build backend image**\n   ```bash\n   export REGION=<your-region>\n   export PROJECT_ID=<your-gcp-project-id>\n   export REPO=fire-dept\n   gcloud auth configure-docker \"${REGION}-docker.pkg.dev\"\n   docker build -t \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" .\n   docker push \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\"\n   ```\n\n2. **Deploy to Cloud Run**\n   ```bash\n   gcloud run deploy fire-backend \\\n      --image \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" \\\n      --platform managed \\\n      --region \"${REGION}\" \\\n      --allow-unauthenticated \\\n      --port 8080\n   ```\n\n3. **Configure Firebase Hosting Rewrite**\n   Update your `firebase.json` file.\n\n4. **Build Frontend**\n   ```bash\n   cd frontend\n   npm install\n   npm run build\n   ```\n\n5. **Deploy Frontend to Firebase Hosting**\n   ```bash\n   firebase login\n   firebase init hosting\n   firebase deploy --only hosting\n   ```\n\n## API Endpoints\n- GET /api/hello\n- GET /api/stats\n- GET /api/stations\n- POST /api/incidents\n\n## Frontend Routes\n- / \u2014 Home with stats overview\n- /stats \u2014 Statistics\n- /stations \u2014 Stations list\n- /report \u2014 Report a new incident\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"fire-dept-frontend\",\n  \"version\": \"1.1.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --port 4173\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-router-dom\": \"^6.26.2\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.14\",\n    \"vite\": \"^5.4.6\"\n  }\n}\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './pages/Home';\nimport Stats from './pages/Stats';\nimport Stations from './pages/Stations';\nimport Report from './pages/Report';\n\nexport default function App() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <NavBar />\n      <main className=\"flex-1 container mx-auto px-4 py-6\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/stats\" element={<Stats />} />\n          <Route path=\"/stations\" element={<Stations />} />\n          <Route path=\"/report\" element={<Report />} />\n        </Routes>\n      </main>\n      <footer className=\"bg-gray-100 border-t py-4\">\n        <div className=\"container mx-auto px-4 text-sm text-gray-600\">\n          \u00a9 {new Date().getFullYear()} City Fire Department. All rights reserved.\n        </div>\n      </footer>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Home.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\n\nexport default function Home() {\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then((r) => r.json())\n      .then(setStats)\n      .catch(() => setStats(null));\n  }, []);\n\n  return (\n    <div className=\"space-y-8\">\n      <section className=\"rounded-xl bg-gradient-to-r from-red-800 to-red-600 text-white p-8\">\n        <h1 className=\"text-3xl md:text-4xl font-bold\">City Fire Department</h1>\n        <p className=\"mt-2 text-white/90\">Rapid response. Community safety. Professional service.</p>\n        <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {stats ? (\n            <>\n              <StatCard label=\"Calls Today\" value={stats.calls_today} />\n              <StatCard label=\"This Month\" value={stats.calls_this_month} />\n              <StatCard label=\"Avg Response (min)\" value={stats.avg_response_time_min} />\n              <StatCard label=\"Active Incidents\" value={stats.active_incidents} />\n            </>\n          ) : (\n            <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n          )}\n        </div>\n      </section>\n      <section>\n        <h2 className=\"text-xl font-semibold mb-3\">About Us</h2>\n        <p className=\"text-gray-700\">\n          The City Fire Department is committed to protecting life, property, and the environment through prevention, education, emergency response, and community partnerships.\n        </p>\n      </section>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\n\nexport default function Stats() {\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats').then(r => r.json()).then(setStats);\n  }, []);\n\n  if (!stats) {\n    return <div>Loading stats...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-2xl font-semibold\">Department Statistics</h1>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <StatCard label=\"Calls Today\" value={stats.calls_today} />\n        <StatCard label=\"Calls This Month\" value={stats.calls_this_month} />\n        <StatCard label=\"Avg Response Time (min)\" value={stats.avg_response_time_min} />\n        <StatCard label=\"Active Incidents\" value={stats.active_incidents} />\n        <StatCard label=\"Firefighters On Duty\" value={stats.firefighters_on_duty} />\n        <StatCard label=\"Stations\" value={stats.stations} />\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stations.jsx ---\nimport React, { useEffect, useState } from 'react';\n\nexport default function Stations() {\n  const [stations, setStations] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/stations').then(r => r.json()).then((data) => setStations(data.stations || []));\n  }, []);\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-semibold mb-4\">Stations</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {stations.map((s) => (\n          <div key={s.id} className=\"rounded-lg border bg-white shadow-sm p-4\">\n            <h3 className=\"text-lg font-semibold\">{s.name}</h3>\n            <div className=\"text-sm text-gray-600 mt-1\">{s.address}</div>\n            <div className=\"mt-3 flex items-center gap-3 text-sm\">\n              <span className=\"inline-flex items-center gap-1 rounded-md bg-red-50 text-red-600 px-2 py-1\">On Duty: {s.on_duty_count}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Report.jsx ---\nimport React, { useState } from 'react';\n\nexport default function Report() {\n  const [formData, setFormData] = useState({\n    type: '',\n    severity: 'Low',\n    address: '',\n    station_id: 1,\n    units_responding: []\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const response = await fetch('/api/incidents', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formData)\n    });\n    if (response.ok) {\n      // Handle success\n      alert('Incident reported successfully!');\n      setFormData({ type: '', severity: 'Low', address: '', station_id: 1, units_responding: [] });\n    } else {\n      // Handle failure\n      alert('Failed to report incident.');\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h1 className=\"text-2xl font-semibold\">Report an Incident</h1>\n      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded-lg shadow-sm\">\n        <label className=\"block mb-2\">\n          Incident Type\n          <input type=\"text\" name=\"type\" value={formData.type} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <label className=\"block mb-2\">\n          Severity\n          <select name=\"severity\" value={formData.severity} onChange={handleChange} className=\"block w-full mt-1 border rounded-md h-10\">\n            <option value=\"Low\">Low</option>\n            <option value=\"Moderate\">Moderate</option>\n            <option value=\"High\">High</option>\n            <option value=\"Critical\">Critical</option>\n          </select>\n        </label>\n        <label className=\"block mb-2\">\n          Address\n          <input type=\"text\" name=\"address\" value={formData.address} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <label className=\"block mb-2\">\n          Station ID\n          <input type=\"number\" name=\"station_id\" value={formData.station_id} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <button type=\"submit\" className=\"w-full bg-fire-red text-white py-2 rounded-md\">Report Incident</button>\n      </form>\n    </div>\n  );\n}\n\n--- file: frontend/src/index.css ---\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --fire-red: #E11D48;\n}\n\nhtml, body, #root {\n  height: 100%;\n}"
  },
  {
    "role": "user",
    "content": "keep buikding out the FastAPI backend + Vite+React SPA site and make it about the fire department."
  },
  {
    "role": "assistant",
    "content": "--- file: backend/main.py ---\nfrom datetime import datetime, timedelta, timezone\nfrom typing import List, Optional, Literal\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\n\napp = FastAPI(title=\"Fire Department API\", version=\"1.2.0\")\n\n# Allow frontend dev server in local development\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5173\", \"http://127.0.0.1:5173\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# In-memory sample data\nUTC = timezone.utc\n\nSTATIONS = [\n    {\n        \"id\": 1,\n        \"name\": \"Station 1 - Central\",\n        \"address\": \"100 Main St\",\n        \"apparatus_count\": 4,\n        \"on_duty_count\": 12,\n        \"lat\": 47.6062,\n        \"lng\": -122.3321,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Station 2 - North\",\n        \"address\": \"220 North Ave\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 9,\n        \"lat\": 47.6756,\n        \"lng\": -122.2711,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Station 3 - South\",\n        \"address\": \"450 South Blvd\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 8,\n        \"lat\": 47.5233,\n        \"lng\": -122.3550,\n    },\n]\n\nnow = datetime.now(tz=UTC)\nINCIDENTS = [\n    {\n        \"id\": 101,\n        \"type\": \"Structure Fire\",\n        \"severity\": \"Critical\",\n        \"status\": \"Active\",\n        \"address\": \"742 Evergreen Terrace\",\n        \"reported_at\": (now - timedelta(minutes=12)).isoformat(),\n        \"units_responding\": [\"E1\", \"T1\", \"B1\", \"M3\"],\n        \"station_id\": 1,\n    },\n    {\n        \"id\": 102,\n        \"type\": \"Medical Aid\",\n        \"severity\": \"Moderate\",\n        \"status\": \"Cleared\",\n        \"address\": \"88 Lakeview Rd\",\n        \"reported_at\": (now - timedelta(hours=3, minutes=5)).isoformat(),\n        \"units_responding\": [\"M2\"],\n        \"station_id\": 2,\n    },\n    {\n        \"id\": 103,\n        \"type\": \"Vehicle Accident\",\n        \"severity\": \"High\",\n        \"status\": \"Active\",\n        \"address\": \"I-5 S & Exit 163\",\n        \"reported_at\": (now - timedelta(minutes=34)).isoformat(),\n        \"units_responding\": [\"E3\", \"M4\", \"B2\"],\n        \"station_id\": 3,\n    },\n    {\n        \"id\": 104,\n        \"type\": \"Alarm Bell\",\n        \"severity\": \"Low\",\n        \"status\": \"Cleared\",\n        \"address\": \"55 Commerce Park\",\n        \"reported_at\": (now - timedelta(days=1, hours=2)).isoformat(),\n        \"units_responding\": [\"E2\"],\n        \"station_id\": 2,\n    },\n]\n\ndef month_start(dt: datetime) -> datetime:\n    return dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n\ndef compute_stats():\n    _now = datetime.now(tz=UTC)\n    calls_today = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]).date() == _now.date()\n    )\n    calls_this_month = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]) >= month_start(_now)\n    )\n    active_incidents = sum(1 for i in INCIDENTS if i[\"status\"].lower() == \"active\")\n    avg_response_time_min = 5.7  # mock\n    firefighters_on_duty = sum(s[\"on_duty_count\"] for s in STATIONS)\n    stations_count = len(STATIONS)\n    return {\n        \"calls_today\": calls_today,\n        \"calls_this_month\": calls_this_month,\n        \"avg_response_time_min\": avg_response_time_min,\n        \"active_incidents\": active_incidents,\n        \"firefighters_on_duty\": firefighters_on_duty,\n        \"stations\": stations_count,\n        \"last_updated\": _now.isoformat(),\n    }\n\ndef next_incident_id() -> int:\n    return (max((i[\"id\"] for i in INCIDENTS), default=100)) + 1\n\ndef ensure_station_exists(station_id: int):\n    if not any(s[\"id\"] == station_id for s in STATIONS):\n        raise HTTPException(status_code=400, detail=\"Invalid station_id\")\n\nclass IncidentCreate(BaseModel):\n    type: str\n    severity: Literal[\"Low\", \"Moderate\", \"High\", \"Critical\"]\n    address: str\n    station_id: int\n    units_responding: List[str] = Field(default_factory=list)\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Welcome to the Fire Department API\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return compute_stats()\n\n@app.get(\"/api/stations\")\nasync def list_stations():\n    return {\"stations\": STATIONS}\n\n@app.post(\"/api/incidents\", status_code=201)\nasync def create_incident(payload: IncidentCreate):\n    ensure_station_exists(payload.station_id)\n    incident = {\n        \"id\": next_incident_id(),\n        \"type\": payload.type,\n        \"severity\": payload.severity,\n        \"status\": \"Active\",\n        \"address\": payload.address,\n        \"reported_at\": datetime.now(tz=UTC).isoformat(),\n        \"units_responding\": payload.units_responding or [],\n        \"station_id\": payload.station_id,\n    }\n    INCIDENTS.insert(0, incident)\n    return {\"incident\": incident}\n\nclass Incident(BaseModel):\n    id: int\n    type: str\n    severity: Literal[\"Low\", \"Moderate\", \"High\", \"Critical\"]\n    status: Literal[\"Active\", \"Cleared\"]\n    address: str\n    reported_at: str\n    units_responding: List[str]\n    station_id: int\n\n@app.get(\"/api/incidents\", response_model=List[Incident])\nasync def get_incidents(status: Optional[str] = None):\n    filtered_incidents = INCIDENTS\n    if status:\n        filtered_incidents = [i for i in INCIDENTS if i[\"status\"].lower() == status.lower()]\n    return filtered_incidents\n\n@app.get(\"/api/incidents/{incident_id}\", response_model=Incident)\nasync def get_incident(incident_id: int):\n    incident = next((i for i in INCIDENTS if i[\"id\"] == incident_id), None)\n    if not incident:\n        raise HTTPException(status_code=404, detail=\"Incident not found\")\n    return incident\n\n--- file: README.md ---\n# Fire Department: FastAPI backend + Vite + React + Tailwind SPA\n\nThis repo contains:\n- A FastAPI backend (Cloud Run-ready) with endpoints for fire department stats, stations, and incidents.\n- A Vite + React + TailwindCSS frontend SPA deployed on Firebase Hosting, with rewrites to the Cloud Run backend.\n\n## Local Development\n\n### Terminal 1: Backend\n- python -m venv .venv && source .venv/bin/activate\n- pip install -r backend/requirements.txt\n- uvicorn backend.main:app --reload --port 8080\n\n### Terminal 2: Frontend\n- cd frontend\n- npm install\n- npm run dev\n- Open http://localhost:5173\n\nThe dev server proxies /api to http://localhost:8080.\n\n## Build and Deploy (GCP Artifact Registry + Cloud Run + Firebase Hosting)\n\n1. **Build backend image**\n   ```bash\n   export REGION=<your-region>\n   export PROJECT_ID=<your-gcp-project-id>\n   export REPO=fire-dept\n   gcloud auth configure-docker \"${REGION}-docker.pkg.dev\"\n   docker build -t \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" .\n   docker push \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\"\n   ```\n\n2. **Deploy to Cloud Run**\n   ```bash\n   gcloud run deploy fire-backend \\\n      --image \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" \\\n      --platform managed \\\n      --region \"${REGION}\" \\\n      --allow-unauthenticated \\\n      --port 8080\n   ```\n\n3. **Configure Firebase Hosting Rewrite**\n   Update your `firebase.json` file.\n\n4. **Build Frontend**\n   ```bash\n   cd frontend\n   npm install\n   npm run build\n   ```\n\n5. **Deploy Frontend to Firebase Hosting**\n   ```bash\n   firebase login\n   firebase init hosting\n   firebase deploy --only hosting\n   ```\n\n## API Endpoints\n- GET /api/hello\n- GET /api/stats\n- GET /api/stations\n- POST /api/incidents\n\n## Frontend Routes\n- / \u2014 Home with stats overview\n- /stats \u2014 Statistics\n- /stations \u2014 Stations list\n- /report \u2014 Report a new incident\n\n--- file: frontend/package.json ---\n{\n  \"name\": \"fire-dept-frontend\",\n  \"version\": \"1.2.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview --port 4173\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.3.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-router-dom\": \"^6.26.2\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.14\",\n    \"vite\": \"^5.4.6\"\n  }\n}\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './pages/Home';\nimport Stats from './pages/Stats';\nimport Stations from './pages/Stations';\nimport Report from './pages/Report';\n\nexport default function App() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <NavBar />\n      <main className=\"flex-1 container mx-auto px-4 py-6\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/stats\" element={<Stats />} />\n          <Route path=\"/stations\" element={<Stations />} />\n          <Route path=\"/report\" element={<Report />} />\n        </Routes>\n      </main>\n      <footer className=\"bg-gray-100 border-t py-4\">\n        <div className=\"container mx-auto px-4 text-sm text-gray-600\">\n          \u00a9 {new Date().getFullYear()} City Fire Department. All rights reserved.\n        </div>\n      </footer>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Home.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\n\nexport default function Home() {\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats')\n      .then((r) => r.json())\n      .then(setStats)\n      .catch(() => setStats(null));\n  }, []);\n\n  return (\n    <div className=\"space-y-8\">\n      <section className=\"rounded-xl bg-gradient-to-r from-red-800 to-red-600 text-white p-8\">\n        <h1 className=\"text-3xl md:text-4xl font-bold\">City Fire Department</h1>\n        <p className=\"mt-2 text-white/90\">Rapid response. Community safety. Professional service.</p>\n        <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {stats ? (\n            <>\n              <StatCard label=\"Calls Today\" value={stats.calls_today} />\n              <StatCard label=\"This Month\" value={stats.calls_this_month} />\n              <StatCard label=\"Avg Response (min)\" value={stats.avg_response_time_min} />\n              <StatCard label=\"Active Incidents\" value={stats.active_incidents} />\n            </>\n          ) : (\n            <div className=\"animate-pulse h-20 bg-white/10 rounded-lg\" />\n          )}\n        </div>\n      </section>\n      <section>\n        <h2 className=\"text-xl font-semibold mb-3\">About Us</h2>\n        <p className=\"text-gray-700\">\n          The City Fire Department is committed to protecting life, property, and the environment through prevention, education, emergency response, and community partnerships.\n        </p>\n      </section>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stats.jsx ---\nimport React, { useEffect, useState } from 'react';\nimport StatCard from '../components/StatCard';\n\nexport default function Stats() {\n  const [stats, setStats] = useState(null);\n\n  useEffect(() => {\n    fetch('/api/stats').then(r => r.json()).then(setStats);\n  }, []);\n\n  if (!stats) {\n    return <div>Loading stats...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-2xl font-semibold\">Department Statistics</h1>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <StatCard label=\"Calls Today\" value={stats.calls_today} />\n        <StatCard label=\"Calls This Month\" value={stats.calls_this_month} />\n        <StatCard label=\"Avg Response Time (min)\" value={stats.avg_response_time_min} />\n        <StatCard label=\"Active Incidents\" value={stats.active_incidents} />\n        <StatCard label=\"Firefighters On Duty\" value={stats.firefighters_on_duty} />\n        <StatCard label=\"Stations\" value={stats.stations} />\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Stations.jsx ---\nimport React, { useEffect, useState } from 'react';\n\nexport default function Stations() {\n  const [stations, setStations] = useState([]);\n\n  useEffect(() => {\n    fetch('/api/stations').then(r => r.json()).then((data) => setStations(data.stations || []));\n  }, []);\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-semibold mb-4\">Stations</h1>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\n        {stations.map((s) => (\n          <div key={s.id} className=\"rounded-lg border bg-white shadow-sm p-4\">\n            <h3 className=\"text-lg font-semibold\">{s.name}</h3>\n            <div className=\"text-sm text-gray-600 mt-1\">{s.address}</div>\n            <div className=\"mt-3 flex items-center gap-3 text-sm\">\n              <span className=\"inline-flex items-center gap-1 rounded-md bg-red-50 text-red-600 px-2 py-1\">On Duty: {s.on_duty_count}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Report.jsx ---\nimport React, { useState } from 'react';\n\nexport default function Report() {\n  const [formData, setFormData] = useState({\n    type: '',\n    severity: 'Low',\n    address: '',\n    station_id: 1,\n    units_responding: []\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const response = await fetch('/api/incidents', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formData)\n    });\n    if (response.ok) {\n      alert('Incident reported successfully!');\n      setFormData({ type: '', severity: 'Low', address: '', station_id: 1, units_responding: [] });\n    } else {\n      alert('Failed to report incident.');\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h1 className=\"text-2xl font-semibold\">Report an Incident</h1>\n      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded-lg shadow-sm\">\n        <label className=\"block mb-2\">\n          Incident Type\n          <input type=\"text\" name=\"type\" value={formData.type} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <label className=\"block mb-2\">\n          Severity\n          <select name=\"severity\" value={formData.severity} onChange={handleChange} className=\"block w-full mt-1 border rounded-md h-10\">\n            <option value=\"Low\">Low</option>\n            <option value=\"Moderate\">Moderate</option>\n            <option value=\"High\">High</option>\n            <option value=\"Critical\">Critical</option>\n          </select>\n        </label>\n        <label className=\"block mb-2\">\n          Address\n          <input type=\"text\" name=\"address\" value={formData.address} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <label className=\"block mb-2\">\n          Station ID\n          <input type=\"number\" name=\"station_id\" value={formData.station_id} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <button type=\"submit\" className=\"w-full bg-red-600 text-white py-2 rounded-md\">Report Incident</button>\n      </form>\n    </div>\n  );\n}\n\n--- file: frontend/src/index.css ---\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --fire-red: #E11D48;\n}\n\nhtml, body, #root {\n  height: 100%;\n}--- file: backend/main.py ---\nfrom datetime import datetime, timedelta, timezone\nfrom typing import List, Optional, Literal\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel, Field\n\napp = FastAPI(title=\"Fire Department API\", version=\"1.3.0\")\n\n# Allow frontend dev server in local development\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5173\", \"http://127.0.0.1:5173\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# In-memory sample data\nUTC = timezone.utc\n\nSTATIONS = [\n    {\n        \"id\": 1,\n        \"name\": \"Station 1 - Central\",\n        \"address\": \"100 Main St\",\n        \"apparatus_count\": 4,\n        \"on_duty_count\": 12,\n        \"lat\": 47.6062,\n        \"lng\": -122.3321,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Station 2 - North\",\n        \"address\": \"220 North Ave\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 9,\n        \"lat\": 47.6756,\n        \"lng\": -122.2711,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Station 3 - South\",\n        \"address\": \"450 South Blvd\",\n        \"apparatus_count\": 3,\n        \"on_duty_count\": 8,\n        \"lat\": 47.5233,\n        \"lng\": -122.3550,\n    },\n]\n\nnow = datetime.now(tz=UTC)\nINCIDENTS = [\n    {\n        \"id\": 101,\n        \"type\": \"Structure Fire\",\n        \"severity\": \"Critical\",\n        \"status\": \"Active\",\n        \"address\": \"742 Evergreen Terrace\",\n        \"reported_at\": (now - timedelta(minutes=12)).isoformat(),\n        \"units_responding\": [\"E1\", \"T1\", \"B1\", \"M3\"],\n        \"station_id\": 1,\n    },\n    {\n        \"id\": 102,\n        \"type\": \"Medical Aid\",\n        \"severity\": \"Moderate\",\n        \"status\": \"Cleared\",\n        \"address\": \"88 Lakeview Rd\",\n        \"reported_at\": (now - timedelta(hours=3, minutes=5)).isoformat(),\n        \"units_responding\": [\"M2\"],\n        \"station_id\": 2,\n    },\n    {\n        \"id\": 103,\n        \"type\": \"Vehicle Accident\",\n        \"severity\": \"High\",\n        \"status\": \"Active\",\n        \"address\": \"I-5 S & Exit 163\",\n        \"reported_at\": (now - timedelta(minutes=34)).isoformat(),\n        \"units_responding\": [\"E3\", \"M4\", \"B2\"],\n        \"station_id\": 3,\n    },\n    {\n        \"id\": 104,\n        \"type\": \"Alarm Bell\",\n        \"severity\": \"Low\",\n        \"status\": \"Cleared\",\n        \"address\": \"55 Commerce Park\",\n        \"reported_at\": (now - timedelta(days=1, hours=2)).isoformat(),\n        \"units_responding\": [\"E2\"],\n        \"station_id\": 2,\n    },\n]\n\ndef month_start(dt: datetime) -> datetime:\n    return dt.replace(day=1, hour=0, minute=0, second=0, microsecond=0)\n\ndef compute_stats():\n    _now = datetime.now(tz=UTC)\n    calls_today = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]).date() == _now.date()\n    )\n    calls_this_month = sum(\n        1 for i in INCIDENTS if datetime.fromisoformat(i[\"reported_at\"]) >= month_start(_now)\n    )\n    active_incidents = sum(1 for i in INCIDENTS if i[\"status\"].lower() == \"active\")\n    avg_response_time_min = 5.7  # mock\n    firefighters_on_duty = sum(s[\"on_duty_count\"] for s in STATIONS)\n    stations_count = len(STATIONS)\n    return {\n        \"calls_today\": calls_today,\n        \"calls_this_month\": calls_this_month,\n        \"avg_response_time_min\": avg_response_time_min,\n        \"active_incidents\": active_incidents,\n        \"firefighters_on_duty\": firefighters_on_duty,\n        \"stations\": stations_count,\n        \"last_updated\": _now.isoformat(),\n    }\n\ndef next_incident_id() -> int:\n    return (max((i[\"id\"] for i in INCIDENTS), default=100)) + 1\n\ndef ensure_station_exists(station_id: int):\n    if not any(s[\"id\"] == station_id for s in STATIONS):\n        raise HTTPException(status_code=400, detail=\"Invalid station_id\")\n\nclass IncidentCreate(BaseModel):\n    type: str\n    severity: Literal[\"Low\", \"Moderate\", \"High\", \"Critical\"]\n    address: str\n    station_id: int\n    units_responding: List[str] = Field(default_factory=list)\n\n@app.get(\"/api/hello\")\nasync def hello():\n    return {\"message\": \"Welcome to the Fire Department API\"}\n\n@app.get(\"/api/stats\")\nasync def stats():\n    return compute_stats()\n\n@app.get(\"/api/stations\")\nasync def list_stations():\n    return {\"stations\": STATIONS}\n\n@app.post(\"/api/incidents\", status_code=201)\nasync def create_incident(payload: IncidentCreate):\n    ensure_station_exists(payload.station_id)\n    incident = {\n        \"id\": next_incident_id(),\n        \"type\": payload.type,\n        \"severity\": payload.severity,\n        \"status\": \"Active\",\n        \"address\": payload.address,\n        \"reported_at\": datetime.now(tz=UTC).isoformat(),\n        \"units_responding\": payload.units_responding or [],\n        \"station_id\": payload.station_id,\n    }\n    INCIDENTS.insert(0, incident)\n    return {\"incident\": incident}\n\nclass Incident(BaseModel):\n    id: int\n    type: str\n    severity: Literal[\"Low\", \"Moderate\", \"High\", \"Critical\"]\n    status: Literal[\"Active\", \"Cleared\"]\n    address: str\n    reported_at: str\n    units_responding: List[str]\n    station_id: int\n\n@app.get(\"/api/incidents\", response_model=List[Incident])\nasync def get_incidents(status: Optional[str] = None):\n    filtered_incidents = INCIDENTS\n    if status:\n        filtered_incidents = [i for i in INCIDENTS if i[\"status\"].lower() == status.lower()]\n    return filtered_incidents\n\n@app.get(\"/api/incidents/{incident_id}\", response_model=Incident)\nasync def get_incident(incident_id: int):\n    incident = next((i for i in INCIDENTS if i[\"id\"] == incident_id), None)\n    if not incident:\n        raise HTTPException(status_code=404, detail=\"Incident not found\")\n    return incident\n\n@app.patch(\"/api/incidents/{incident_id}\")\nasync def update_incident(incident_id: int, payload: IncidentCreate):\n    incident = next((i for i in INCIDENTS if i[\"id\"] == incident_id), None)\n    if not incident:\n        raise HTTPException(status_code=404, detail=\"Incident not found\")\n    \n    # Update only fields provided\n    if payload.type:\n        incident[\"type\"] = payload.type\n    if payload.severity:\n        incident[\"severity\"] = payload.severity\n    if payload.address:\n        incident[\"address\"] = payload.address\n    if payload.units_responding:\n        incident[\"units_responding\"] = payload.units_responding\n\n    return {\"incident\": incident}\n\n--- file: README.md ---\n# Fire Department: FastAPI backend + Vite + React + Tailwind SPA\n\nThis repo contains:\n- A FastAPI backend (Cloud Run-ready) with endpoints for fire department stats, stations, and incidents.\n- A Vite + React + TailwindCSS frontend SPA deployed on Firebase Hosting, with rewrites to the Cloud Run backend.\n\n## Local Development\n\n### Terminal 1: Backend\n- python -m venv .venv && source .venv/bin/activate\n- pip install -r backend/requirements.txt\n- uvicorn backend.main:app --reload --port 8080\n\n### Terminal 2: Frontend\n- cd frontend\n- npm install\n- npm run dev\n- Open http://localhost:5173\n\nThe dev server proxies /api to http://localhost:8080.\n\n## Build and Deploy (GCP Artifact Registry + Cloud Run + Firebase Hosting)\n\n1. **Build backend image**\n   ```bash\n   export REGION=<your-region>\n   export PROJECT_ID=<your-gcp-project-id>\n   export REPO=fire-dept\n   gcloud auth configure-docker \"${REGION}-docker.pkg.dev\"\n   docker build -t \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" .\n   docker push \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\"\n   ```\n\n2. **Deploy to Cloud Run**\n   ```bash\n   gcloud run deploy fire-backend \\\n      --image \"${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/fire-backend:latest\" \\\n      --platform managed \\\n      --region \"${REGION}\" \\\n      --allow-unauthenticated \\\n      --port 8080\n   ```\n\n3. **Configure Firebase Hosting Rewrite**\n   Update your `firebase.json` file.\n\n4. **Build Frontend**\n   ```bash\n   cd frontend\n   npm install\n   npm run build\n   ```\n\n5. **Deploy Frontend to Firebase Hosting**\n   ```bash\n   firebase login\n   firebase init hosting\n   firebase deploy --only hosting\n   ```\n\n## API Endpoints\n- GET /api/hello\n- GET /api/stats\n- GET /api/stations\n- POST /api/incidents\n- GET /api/incidents\n\n## Frontend Routes\n- / \u2014 Home with stats overview\n- /stats \u2014 Statistics\n- /stations \u2014 Stations list\n- /report \u2014 Report a new incident\n\n--- file: frontend/src/App.jsx ---\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport Home from './pages/Home';\nimport Stats from './pages/Stats';\nimport Stations from './pages/Stations';\nimport Report from './pages/Report';\n\nexport default function App() {\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <NavBar />\n      <main className=\"flex-1 container mx-auto px-4 py-6\">\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/stats\" element={<Stats />} />\n          <Route path=\"/stations\" element={<Stations />} />\n          <Route path=\"/report\" element={<Report />} />\n        </Routes>\n      </main>\n      <footer className=\"bg-gray-100 border-t py-4\">\n        <div className=\"container mx-auto px-4 text-sm text-gray-600\">\n          \u00a9 {new Date().getFullYear()} City Fire Department. All rights reserved.\n        </div>\n      </footer>\n    </div>\n  );\n}\n\n--- file: frontend/src/pages/Report.jsx ---\nimport React, { useState } from 'react';\n\nexport default function Report() {\n  const [formData, setFormData] = useState({\n    type: '',\n    severity: 'Low',\n    address: '',\n    station_id: 1,\n    units_responding: []\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const response = await fetch('/api/incidents', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formData)\n    });\n    if (response.ok) {\n      alert('Incident reported successfully!');\n      setFormData({ type: '', severity: 'Low', address: '', station_id: 1, units_responding: [] });\n    } else {\n      alert('Failed to report incident.');\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h1 className=\"text-2xl font-semibold\">Report an Incident</h1>\n      <form onSubmit={handleSubmit} className=\"bg-white p-6 rounded-lg shadow-sm\">\n        <label className=\"block mb-2\">\n          Incident Type\n          <input type=\"text\" name=\"type\" value={formData.type} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <label className=\"block mb-2\">\n          Severity\n          <select name=\"severity\" value={formData.severity} onChange={handleChange} className=\"block w-full mt-1 border rounded-md h-10\">\n            <option value=\"Low\">Low</option>\n            <option value=\"Moderate\">Moderate</option>\n            <option value=\"High\">High</option>\n            <option value=\"Critical\">Critical</option>\n          </select>\n        </label>\n        <label className=\"block mb-2\">\n          Address\n          <input type=\"text\" name=\"address\" value={formData.address} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <label className=\"block mb-2\">\n          Station ID\n          <input type=\"number\" name=\"station_id\" value={formData.station_id} onChange={handleChange} required className=\"block w-full mt-1 border rounded-md h-10\" />\n        </label>\n        <button type=\"submit\" className=\"w-full bg-red-600 text-white py-2 rounded-md\">Report Incident</button>\n      </form>\n    </div>\n  );\n}"
  }
]